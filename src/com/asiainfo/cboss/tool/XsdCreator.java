package com.asiainfo.cboss.tool;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;

public class XsdCreator {

	public XsdCreator() {
		super();
		// TODO Auto-generated constructor stub
	}

	public void createXsdFile(String filePath, String fileName, String strRootNode, XsdNode[] nodes)throws Exception{
		XsdNode rootNode = null;
		for (int i = 0; i < nodes.length; i ++){
			if(strRootNode.equals(nodes[i].getNodeName())){
				rootNode = nodes[i];
			}
		}
		OutputStream out = new FileOutputStream(filePath + File.separator + fileName + ".xsd");
		String xmlHead = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
		String commad = "<!-- Generated by AsiaInfo XsdCreator -->\n";
		String rootBegin = "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\" attributeFormDefault=\"unqualified\">\n";
		String rootEnd = "</xs:schema>\n";
		out.write(xmlHead.getBytes());
		out.write(commad.getBytes());
		out.write(rootBegin.getBytes());
		createFile(nodes, rootNode, 1, out);
		out.write(rootEnd.getBytes());
		out.close();

	}

	protected void createFile(XsdNode[] nodes, XsdNode nowNode, int nowTab, OutputStream out)throws Exception{
		//<xs:element name="InterBOSS">
		String tabs = StringUtil.getSpecialStr('\t', nowTab);
		String cTabs = StringUtil.getSpecialStr('\t', nowTab + 1);
		String ccTabs = StringUtil.getSpecialStr('\t', nowTab + 2);

		String banded = "";
		if(XsdNode.CON_ONEMORE.indexOf(nowNode.getConstrain()) > -1){
			banded = " maxOccurs=\"unbounded\"";
		}else if(XsdNode.CON_ZEROMORE.indexOf(nowNode.getConstrain()) > -1){
			banded = " minOccurs=\"0\" maxOccurs=\"unbounded\"";
		}else if(XsdNode.CON_ZEROONE.indexOf(nowNode.getConstrain()) > -1){
			banded = " minOccurs=\"0\"";
		}else if(XsdNode.CON_CHIOCE.indexOf(nowNode.getConstrain()) > -1){
			banded = " ";
		}

		String strNode = tabs + "<xs:element name=\"" + nowNode.getNodeName() + "\" " + banded + ">\n" ;
		//<xs:annotation>
		//	<xs:documentation>自有跨省集团业务收费单文件</xs:documentation>
		//</xs:annotation>
//		String annotation = tabs + "<xs:annotation>\n" + cTabs + "<xs:documentation>"
//			+ nowNode.getDescript() + "</xs:documentation>\n"
//			+ tabs + "</xs:annotation>\n";
		String nodeEnd = tabs + "</xs:element>\n" ;

		out.write(strNode.getBytes());
		//out.write(annotation.getBytes("UTF-8"));

		if(XsdNode.TYPE_COMPLX.indexOf(nowNode.getDataType()) > -1
				|| XsdNode.LENGTH_COMPLX.indexOf(nowNode.getLength()) > -1){

			String complx = cTabs + "<xs:complexType>\n";

			boolean isAllChoice = true;// 判断是否所有节点都是choice的，如果是则不需要<<xs:sequence>
			int chldcnt = 0;
			for(int i = 0; i < nodes.length; i ++){

				//或者根节点是""串，则判断父节点的名称
				if(("".equals(nowNode.getNodeNo())
						&& nodes[i].getPNodeName().equals(nowNode.getNodeName())
						&& nodes[i].getNodeNo().indexOf("\\.") == -1)
						||(nodes[i].getPNodeName().equals(nowNode.getNodeName())
						&& nodes[i].getNodeNo().startsWith(nowNode.getNodeNo()))
						
						 ){
					chldcnt ++;
					if(!(XsdNode.CON_CHIOCE.indexOf(nodes[i].getConstrain()) > -1)){
						isAllChoice = false;
						break;
					}

				}

			}

			String seqence = ccTabs + "<xs:sequence>\n";
			out.write(complx.getBytes());

			if(! isAllChoice || chldcnt == 0){
				out.write(seqence.getBytes());
			}

			boolean isChoice = false;
			for(int i = 0; i < nodes.length; i ++){

				if(nodes[i].getPNodeName().equals(nowNode.getNodeName())
						&& nodes[i].getNodeNo().startsWith(nowNode.getNodeNo())){
					//如果是choice，而且不在choice的节点内，则增加该节点
					if( ! isChoice
							&& (XsdNode.CON_CHIOCE.indexOf(nodes[i].getConstrain()) > -1 )){
						String choice = ccTabs + "<xs:choice>\n";
						out.write(choice.getBytes());
						isChoice = true;
					}
					//如果不是choice，而且在choice的节点内，则关闭该节点
					if( isChoice
							&& ! (XsdNode.CON_CHIOCE.indexOf(nodes[i].getConstrain()) > -1)){
						String choice = ccTabs + "</xs:choice>\n";
						out.write(choice.getBytes());
						isChoice = false;
					}

					createFile(nodes, nodes[i], nowTab + 3, out);
				}

			}
			//如果循环结束，choice节点未结束，则结束该节点
			if(isChoice){
				out.write("</xs:choice>".getBytes());
			}

			String sequenceEnd = ccTabs + "</xs:sequence>\n";
			String complxEnd = cTabs + "</xs:complexType>\n";

			if(! isAllChoice  || chldcnt == 0){
				out.write(sequenceEnd.getBytes());
			}
			out.write(complxEnd.getBytes());

		}else if(nowNode.getLength() != null
				&& nowNode.getLength().trim().length() > 0){

			String simpl = cTabs + "<xs:simpleType>\n";
			String simplEnd = cTabs + "</xs:simpleType>\n";
			out.write(simpl.getBytes());

			if(XsdNode.TYPE_STRING.equalsIgnoreCase(nowNode.getDataType())){
				//<xs:restriction base="xs:string">
				//<xs:length value="14"/>
				//</xs:restriction>

				String res = ccTabs + "<xs:restriction base=\"xs:string\">\n";
				String len = nowNode.getLength().substring(1);
				if(nowNode.getLength().startsWith(XsdNode.LENGTH_FIX)){
					res += ccTabs + "\t<xs:length value=\"" + len + "\"/>\n";
				}else{
					res += ccTabs + "\t<xs:maxLength value=\"" + len + "\"/>\n";
				}
				res += ccTabs + "</xs:restriction>\n";
				out.write(res.getBytes());

			}else if(XsdNode.TYPE_NUMBER.equalsIgnoreCase(nowNode.getDataType())){
				//<xs:restriction base="xs:decimal">
				//<xs:totalDigits value="9"/>
				//<xs:fractionDigits value="0"/>
				String res = ccTabs + "<xs:restriction base=\"xs:decimal\">\n";
				String len = nowNode.getLength().substring(1);
				//if(nowNode.getLength().startsWith(XsdNode.LENGTH_FIX)){
					res += ccTabs + "\t<xs:totalDigits value=\"" + new Double(len).intValue() + "\"/>\n";
				//}else{
				//	res += ccTabs + "\t<xs:maxLength value=\"" + len + "\"/>";
				//}
				res += ccTabs + "</xs:restriction>\n";
				out.write(res.getBytes());
			}

			out.write(simplEnd.getBytes());
		}else{
			//<xs:complexType>
			//<xs:simpleContent>
			//<xs:extension base="xs:string"/>
			//</xs:simpleContent>
			//</xs:complexType>

			String xsCplx = cTabs + "<xs:complexType>\n"
				+ ccTabs + "<xs:simpleContent>\n";
			if(XsdNode.TYPE_STRING.equalsIgnoreCase(nowNode.getDataType())){
				xsCplx += ccTabs + "\t<xs:extension base=\"xs:string\"/>";
			}else if(XsdNode.TYPE_NUMBER.equalsIgnoreCase(nowNode.getDataType())){
				xsCplx += ccTabs + "\t<xs:extension base=\"xs:decimal\"/>";
			}

			xsCplx += ccTabs + "</xs:simpleContent>\n";
			xsCplx += cTabs + "</xs:complexType>\n";

			out.write(xsCplx.getBytes());

		}


		out.write(nodeEnd.getBytes());

	}

	public static void printUsage(){
		System.out.println("Usage : ");
		System.out.println("\tjava com.asiainfo.tools.xsd.XsdCreator filePath fileNo");
		System.out.println("Parameters :");
		System.out.println("\tfilePath the directory where to be save the xsd files created");
		System.out.println("\tfilNo    the FILE_NO field value in the table cboss_msg_desc whic to query all datas for one file");
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) throws Exception{

	}

}



